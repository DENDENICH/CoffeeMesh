openapi: 3.0.3


info:
  title: Orders API
  description: API that allows you to manage orders for CoffeeMesh
  version: 1.0.0


servers:
  - url: https://coffeemesh.com
    description: main production server
  - url: https://coffeemesh-staging.com
    description: staging server for testing purposes only


paths:
  /orders: # endpoint
    get:  # тип запроса 
      parameters:  # параметры запроса
        - name: cancelled
          in: query
          required: false  # обязательный ли запрос
          schema:
            type: boolean
        - name: limit
          in: query
          required: false
          schema:
            type: integer
      summary: list of Orders
      operationId: getOrders
      description: >
        A list of orders made by customer sorted 
        by cancelled status and/or limit count
      responses:  # Модели ответов
        "200":
          description: A JSON array of order items
          content:
            application/JSON:
              schema:
                type: object
                properties:
                  order:
                    type: array
                    items: 
                      $ref: '#/components/schemas/OrderItemSchema' 
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
      
    post:
      summary: create order
      operationId: createOrders
      description: >
        A JSON representation of the created order
      requestBody:
        required: true
        content:
          application/JSON:
            schema:
              $ref: '#/components/schemas/CreateOrderSchema'
      responses:
        "201":
          description: A orders of create
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/GetOrderSchema'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'

      
  /orders/{order_id}: 
    parameters:
      - in: path
        name: order_id
        required: true
        schema:
          type: string
          format: UUID

    get:  # тип запроса 
      summary: get order by id
      operationId: getOrder
      responses:  # Модели ответов
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrderSchema'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
    
    put:
      summary: put order by id
      operationId: putOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderSchema'
      responses:  # Модели ответов
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrderSchema'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'

    delete:
      summary: put order by id
      operationId: deleteOrder
      responses:  # Модели ответов
        "204":
          description: the resource was deleted is successfully
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'

  /orders/{order_id}/cancelled:
    parameters:
      - in: path
        name: order_id
        required: true
        schema:
          type: string
          format: UUID
    post:
      operationId: postOrdersCancelled
      description: >
        Cancelled order by id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrderSchema'
        "404":
          $ref: '#/components/responses/NotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'


components:
  responses:
    NotFound:
      description: not found resource response
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    UnprocessableEntity:
      description: payload value is invalid
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    Error:
      type: object
      properties:
        details:
          oneOf:
            - type: string
            - type: array
      required:
        - details
    OrderItemSchema:
      type: object
      required:
        - product
        - size
      properties:
        product:
          type: string
        size:
          type: string
          enum:
            - small
            - medium
            - big
        quantity:
          type: integer
          format: int64
          default: 1
          minimum: 1
          maximum: 1000000
    CreateOrderSchema:
      type: object
      required:
        - order
      properties:
        order:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/OrderItemSchema'
    GetOrderSchema:
      type: object
      required:
        - id
        - create
        - status
        - order
      properties:
        id:
          type: string
          format: UUID
        created:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - created
            - progress
            - cancelled
            - dispatched 
            - delivered 
        order:
          $ref: '#/components/schemas/OrderItemSchema'
